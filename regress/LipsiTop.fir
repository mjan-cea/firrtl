;buildInfoPackage: chisel3, version: 3.1.3, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-09-12 19:37:29.007, builtAtMillis: 1536781049007
circuit LipsiTop : 
  module Memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rdAddr : UInt<9>, rdData : UInt<8>, flip wrEna : UInt<1>, flip wrData : UInt<8>, flip wrAddr : UInt<9>}
    
    reg regPC : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Memory.scala 31:22]
    reg rdAddrReg : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[Memory.scala 32:26]
    rdAddrReg <= io.rdAddr @[Memory.scala 33:13]
    wire program : UInt<8>[7] @[Memory.scala 35:24]
    program[0] <= UInt<8>("h0c7") @[Memory.scala 35:24]
    program[1] <= UInt<6>("h023") @[Memory.scala 35:24]
    program[2] <= UInt<8>("h0c0") @[Memory.scala 35:24]
    program[3] <= UInt<6>("h032") @[Memory.scala 35:24]
    program[4] <= UInt<8>("h0c1") @[Memory.scala 35:24]
    program[5] <= UInt<7>("h055") @[Memory.scala 35:24]
    program[6] <= UInt<8>("h0ff") @[Memory.scala 35:24]
    node _T_38 = bits(rdAddrReg, 7, 0) @[Memory.scala 36:32]
    node _T_40 = bits(_T_38, 2, 0)
    cmem mem : UInt<8>[256] @[Memory.scala 39:16]
    node _T_43 = bits(rdAddrReg, 7, 0) @[Memory.scala 40:27]
    infer mport data = mem[_T_43], clock @[Memory.scala 40:17]
    when io.wrEna : @[Memory.scala 41:18]
      node _T_44 = bits(io.wrAddr, 7, 0) @[Memory.scala 42:8]
      infer mport _T_45 = mem[_T_44], clock @[Memory.scala 42:8]
      _T_45 <= io.wrData @[Memory.scala 42:20]
      skip @[Memory.scala 41:18]
    node _T_46 = bits(rdAddrReg, 8, 8) @[Memory.scala 46:29]
    node _T_47 = mux(_T_46, data, program[_T_40]) @[Memory.scala 46:19]
    io.rdData <= _T_47 @[Memory.scala 46:13]
    
  module Lipsi : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dout : UInt<8>, flip din : UInt<8>, dbg : {pc : UInt<8>, accu : UInt<8>, exit : UInt<1>}}
    
    reg pcReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Lipsi.scala 50:22]
    reg accuReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Lipsi.scala 51:24]
    reg enaAccuReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Lipsi.scala 52:27]
    reg enaPcReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Lipsi.scala 54:25]
    reg funcReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Lipsi.scala 56:24]
    reg outReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Lipsi.scala 60:23]
    reg enaIoReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Lipsi.scala 61:25]
    inst mem of Memory @[Lipsi.scala 63:19]
    mem.clock <= clock
    mem.reset <= reset
    reg regInstr : UInt, clock @[Lipsi.scala 71:25]
    regInstr <= mem.io.rdData @[Lipsi.scala 71:25]
    wire wrEna : UInt<1> @[Lipsi.scala 80:19]
    wire wrAddr : UInt @[Lipsi.scala 81:20]
    wire rdAddr : UInt @[Lipsi.scala 82:20]
    wire updPC : UInt<1> @[Lipsi.scala 83:19]
    mem.io.rdAddr <= rdAddr @[Lipsi.scala 85:17]
    node _T_31 = bits(wrAddr, 7, 0) @[Lipsi.scala 86:40]
    node _T_32 = cat(UInt<1>("h01"), _T_31) @[Cat.scala 30:58]
    mem.io.wrAddr <= _T_32 @[Lipsi.scala 86:17]
    node _T_33 = mux(UInt<1>("h00"), pcReg, accuReg) @[Lipsi.scala 87:23]
    mem.io.wrData <= _T_33 @[Lipsi.scala 87:17]
    mem.io.wrEna <= wrEna @[Lipsi.scala 88:16]
    wire nextPC : UInt @[Lipsi.scala 90:20]
    wrEna <= UInt<1>("h00") @[Lipsi.scala 92:9]
    wrAddr <= mem.io.rdData @[Lipsi.scala 93:10]
    node _T_37 = cat(UInt<1>("h00"), nextPC) @[Cat.scala 30:58]
    rdAddr <= _T_37 @[Lipsi.scala 94:10]
    updPC <= UInt<1>("h01") @[Lipsi.scala 95:9]
    node _T_40 = add(pcReg, UInt<1>("h01")) @[Lipsi.scala 96:19]
    node _T_41 = tail(_T_40, 1) @[Lipsi.scala 96:19]
    nextPC <= _T_41 @[Lipsi.scala 96:10]
    when enaPcReg : @[Lipsi.scala 98:18]
      nextPC <= mem.io.rdData @[Lipsi.scala 99:12]
      skip @[Lipsi.scala 98:18]
    when updPC : @[Lipsi.scala 101:15]
      pcReg <= nextPC @[Lipsi.scala 102:11]
      skip @[Lipsi.scala 101:15]
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Lipsi.scala 106:25]
    reg exitReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Lipsi.scala 109:24]
    node accuZero = eq(accuReg, UInt<1>("h00")) @[Lipsi.scala 112:26]
    node _T_46 = bits(mem.io.rdData, 1, 0) @[Lipsi.scala 114:25]
    node _T_48 = eq(_T_46, UInt<1>("h00")) @[Lipsi.scala 114:32]
    node _T_49 = bits(mem.io.rdData, 1, 0) @[Lipsi.scala 115:13]
    node _T_51 = eq(_T_49, UInt<2>("h02")) @[Lipsi.scala 115:20]
    node _T_52 = and(_T_51, accuZero) @[Lipsi.scala 115:29]
    node _T_53 = or(_T_48, _T_52) @[Lipsi.scala 114:41]
    node _T_54 = bits(mem.io.rdData, 1, 0) @[Lipsi.scala 116:13]
    node _T_56 = eq(_T_54, UInt<2>("h03")) @[Lipsi.scala 116:20]
    node _T_58 = eq(accuZero, UInt<1>("h00")) @[Lipsi.scala 116:32]
    node _T_59 = and(_T_56, _T_58) @[Lipsi.scala 116:29]
    node doBranch = or(_T_53, _T_59) @[Lipsi.scala 115:42]
    enaAccuReg <= UInt<1>("h00") @[Lipsi.scala 118:14]
    enaPcReg <= UInt<1>("h00") @[Lipsi.scala 119:12]
    enaIoReg <= UInt<1>("h00") @[Lipsi.scala 120:12]
    node _T_63 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_63 : @[Conditional.scala 40:58]
      stateReg <= UInt<3>("h01") @[Lipsi.scala 125:16]
      node _T_64 = bits(mem.io.rdData, 6, 4) @[Lipsi.scala 126:24]
      funcReg <= _T_64 @[Lipsi.scala 126:15]
      node _T_65 = bits(mem.io.rdData, 7, 7) @[Lipsi.scala 128:18]
      node _T_67 = eq(_T_65, UInt<1>("h00")) @[Lipsi.scala 128:22]
      when _T_67 : @[Lipsi.scala 128:31]
        updPC <= UInt<1>("h00") @[Lipsi.scala 129:15]
        node _T_69 = bits(mem.io.rdData, 6, 4) @[Lipsi.scala 130:26]
        funcReg <= _T_69 @[Lipsi.scala 130:17]
        enaAccuReg <= UInt<1>("h01") @[Lipsi.scala 131:20]
        node _T_72 = bits(mem.io.rdData, 3, 0) @[Lipsi.scala 132:37]
        node _T_73 = cat(UInt<5>("h010"), _T_72) @[Cat.scala 30:58]
        rdAddr <= _T_73 @[Lipsi.scala 132:16]
        skip @[Lipsi.scala 128:31]
      node _T_74 = bits(mem.io.rdData, 7, 4) @[Lipsi.scala 135:18]
      node _T_76 = eq(_T_74, UInt<4>("h08")) @[Lipsi.scala 135:25]
      when _T_76 : @[Lipsi.scala 135:36]
        node _T_78 = bits(mem.io.rdData, 3, 0) @[Lipsi.scala 136:34]
        node _T_79 = cat(UInt<1>("h00"), _T_78) @[Cat.scala 30:58]
        wrAddr <= _T_79 @[Lipsi.scala 136:16]
        wrEna <= UInt<1>("h01") @[Lipsi.scala 137:15]
        stateReg <= UInt<3>("h00") @[Lipsi.scala 138:18]
        skip @[Lipsi.scala 135:36]
      node _T_81 = bits(mem.io.rdData, 7, 4) @[Lipsi.scala 141:18]
      node _T_83 = eq(_T_81, UInt<4>("h0a")) @[Lipsi.scala 141:25]
      when _T_83 : @[Lipsi.scala 141:36]
        updPC <= UInt<1>("h00") @[Lipsi.scala 142:15]
        node _T_86 = bits(mem.io.rdData, 3, 0) @[Lipsi.scala 143:37]
        node _T_87 = cat(UInt<5>("h010"), _T_86) @[Cat.scala 30:58]
        rdAddr <= _T_87 @[Lipsi.scala 143:16]
        stateReg <= UInt<3>("h03") @[Lipsi.scala 144:18]
        skip @[Lipsi.scala 141:36]
      node _T_88 = bits(mem.io.rdData, 7, 4) @[Lipsi.scala 147:18]
      node _T_90 = eq(_T_88, UInt<4>("h0b")) @[Lipsi.scala 147:25]
      when _T_90 : @[Lipsi.scala 147:36]
        updPC <= UInt<1>("h00") @[Lipsi.scala 148:15]
        node _T_93 = bits(mem.io.rdData, 3, 0) @[Lipsi.scala 149:37]
        node _T_94 = cat(UInt<5>("h010"), _T_93) @[Cat.scala 30:58]
        rdAddr <= _T_94 @[Lipsi.scala 149:16]
        stateReg <= UInt<3>("h02") @[Lipsi.scala 150:18]
        skip @[Lipsi.scala 147:36]
      node _T_95 = bits(mem.io.rdData, 7, 4) @[Lipsi.scala 153:18]
      node _T_97 = eq(_T_95, UInt<4>("h0c")) @[Lipsi.scala 153:25]
      when _T_97 : @[Lipsi.scala 153:36]
        node _T_98 = bits(mem.io.rdData, 2, 0) @[Lipsi.scala 154:26]
        funcReg <= _T_98 @[Lipsi.scala 154:17]
        enaAccuReg <= UInt<1>("h01") @[Lipsi.scala 155:20]
        skip @[Lipsi.scala 153:36]
      node _T_100 = bits(mem.io.rdData, 7, 4) @[Lipsi.scala 158:18]
      node _T_102 = eq(_T_100, UInt<4>("h0d")) @[Lipsi.scala 158:25]
      when _T_102 : @[Lipsi.scala 158:36]
        when doBranch : @[Lipsi.scala 159:24]
          enaPcReg <= UInt<1>("h01") @[Lipsi.scala 160:20]
          skip @[Lipsi.scala 159:24]
        skip @[Lipsi.scala 158:36]
      node _T_105 = eq(mem.io.rdData, UInt<8>("h0f0")) @[Lipsi.scala 164:19]
      when _T_105 : @[Lipsi.scala 164:31]
        outReg <= accuReg @[Lipsi.scala 165:16]
        enaIoReg <= UInt<1>("h01") @[Lipsi.scala 166:18]
        stateReg <= UInt<3>("h00") @[Lipsi.scala 167:18]
        skip @[Lipsi.scala 164:31]
      node _T_108 = eq(mem.io.rdData, UInt<8>("h0ff")) @[Lipsi.scala 170:19]
      when _T_108 : @[Lipsi.scala 170:31]
        stateReg <= UInt<3>("h05") @[Lipsi.scala 171:18]
        skip @[Lipsi.scala 170:31]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_109 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
      when _T_109 : @[Conditional.scala 39:67]
        wrEna <= UInt<1>("h01") @[Lipsi.scala 175:13]
        stateReg <= UInt<3>("h00") @[Lipsi.scala 176:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_111 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_111 : @[Conditional.scala 39:67]
          stateReg <= UInt<3>("h00") @[Lipsi.scala 179:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_112 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_112 : @[Conditional.scala 39:67]
            updPC <= UInt<1>("h00") @[Lipsi.scala 182:13]
            funcReg <= UInt<3>("h07") @[Lipsi.scala 183:15]
            enaAccuReg <= UInt<1>("h01") @[Lipsi.scala 184:18]
            node _T_117 = cat(UInt<1>("h01"), mem.io.rdData) @[Cat.scala 30:58]
            rdAddr <= _T_117 @[Lipsi.scala 185:14]
            stateReg <= UInt<3>("h04") @[Lipsi.scala 186:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_118 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_118 : @[Conditional.scala 39:67]
              stateReg <= UInt<3>("h00") @[Lipsi.scala 189:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_119 = eq(UInt<3>("h05"), stateReg) @[Conditional.scala 37:30]
              when _T_119 : @[Conditional.scala 39:67]
                exitReg <= UInt<1>("h01") @[Lipsi.scala 192:15]
                skip @[Conditional.scala 39:67]
    wire res : UInt @[Lipsi.scala 197:17]
    res <= UInt<8>("h00") @[Lipsi.scala 198:7]
    node _T_123 = eq(UInt<3>("h00"), funcReg) @[Conditional.scala 37:30]
    when _T_123 : @[Conditional.scala 40:58]
      node _T_124 = add(accuReg, mem.io.rdData) @[Lipsi.scala 202:30]
      node _T_125 = tail(_T_124, 1) @[Lipsi.scala 202:30]
      res <= _T_125 @[Lipsi.scala 202:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_126 = eq(UInt<3>("h01"), funcReg) @[Conditional.scala 37:30]
      when _T_126 : @[Conditional.scala 39:67]
        node _T_127 = sub(accuReg, mem.io.rdData) @[Lipsi.scala 203:30]
        node _T_128 = asUInt(_T_127) @[Lipsi.scala 203:30]
        node _T_129 = tail(_T_128, 1) @[Lipsi.scala 203:30]
        res <= _T_129 @[Lipsi.scala 203:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_130 = eq(UInt<3>("h02"), funcReg) @[Conditional.scala 37:30]
        when _T_130 : @[Conditional.scala 39:67]
          node _T_131 = add(accuReg, mem.io.rdData) @[Lipsi.scala 204:30]
          node _T_132 = tail(_T_131, 1) @[Lipsi.scala 204:30]
          res <= _T_132 @[Lipsi.scala 204:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_133 = eq(UInt<3>("h03"), funcReg) @[Conditional.scala 37:30]
          when _T_133 : @[Conditional.scala 39:67]
            node _T_134 = sub(accuReg, mem.io.rdData) @[Lipsi.scala 205:30]
            node _T_135 = asUInt(_T_134) @[Lipsi.scala 205:30]
            node _T_136 = tail(_T_135, 1) @[Lipsi.scala 205:30]
            res <= _T_136 @[Lipsi.scala 205:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_137 = eq(UInt<3>("h04"), funcReg) @[Conditional.scala 37:30]
            when _T_137 : @[Conditional.scala 39:67]
              node _T_138 = and(accuReg, mem.io.rdData) @[Lipsi.scala 206:30]
              res <= _T_138 @[Lipsi.scala 206:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_139 = eq(UInt<3>("h05"), funcReg) @[Conditional.scala 37:30]
              when _T_139 : @[Conditional.scala 39:67]
                node _T_140 = or(accuReg, mem.io.rdData) @[Lipsi.scala 207:29]
                res <= _T_140 @[Lipsi.scala 207:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_141 = eq(UInt<3>("h06"), funcReg) @[Conditional.scala 37:30]
                when _T_141 : @[Conditional.scala 39:67]
                  node _T_142 = xor(accuReg, mem.io.rdData) @[Lipsi.scala 208:30]
                  res <= _T_142 @[Lipsi.scala 208:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_143 = eq(UInt<3>("h07"), funcReg) @[Conditional.scala 37:30]
                  when _T_143 : @[Conditional.scala 39:67]
                    res <= mem.io.rdData @[Lipsi.scala 209:18]
                    skip @[Conditional.scala 39:67]
    when enaAccuReg : @[Lipsi.scala 211:20]
      accuReg <= res @[Lipsi.scala 212:13]
      skip @[Lipsi.scala 211:20]
    when enaIoReg : @[Lipsi.scala 214:18]
      accuReg <= io.din @[Lipsi.scala 215:13]
      skip @[Lipsi.scala 214:18]
    io.dout <= outReg @[Lipsi.scala 218:11]
    io.dbg.accu <= accuReg @[Lipsi.scala 219:15]
    io.dbg.pc <= pcReg @[Lipsi.scala 220:13]
    io.dbg.exit <= exitReg @[Lipsi.scala 221:15]
    
  module LipsiTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dout : UInt<8>, flip din : UInt<8>, dbg : {pc : UInt<8>, accu : UInt<8>, exit : UInt<1>}}
    
    wire x : UInt<1> @[Lipsi.scala 231:15]
    reg _T_13 : UInt<1>, clock @[Lipsi.scala 232:15]
    _T_13 <= reset @[Lipsi.scala 232:15]
    x <= _T_13 @[Lipsi.scala 232:5]
    wire y : UInt<1> @[Lipsi.scala 233:15]
    node _T_16 = eq(x, UInt<1>("h00")) @[Lipsi.scala 234:8]
    y <= _T_16 @[Lipsi.scala 234:5]
    reg resetRegs : UInt<1>, clock @[Lipsi.scala 236:26]
    resetRegs <= y @[Lipsi.scala 236:26]
    inst Lipsi of Lipsi @[Lipsi.scala 258:23]
    Lipsi.clock <= clock
    Lipsi.reset <= reset
    Lipsi.reset <= resetRegs @[Lipsi.scala 260:17]
    io.dbg.exit <= Lipsi.io.dbg.exit @[Lipsi.scala 261:8]
    io.dbg.accu <= Lipsi.io.dbg.accu @[Lipsi.scala 261:8]
    io.dbg.pc <= Lipsi.io.dbg.pc @[Lipsi.scala 261:8]
    Lipsi.io.din <= io.din @[Lipsi.scala 261:8]
    io.dout <= Lipsi.io.dout @[Lipsi.scala 261:8]
    
